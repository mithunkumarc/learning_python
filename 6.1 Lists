List being used as stack
# last in first out
stack = [3,4,5]
stack.append(6)
stack.append(7)
print(stack)
print('first out',stack.pop())
print(stack)

# output :
[3, 4, 5, 6, 7]
('first out', 7)
[3, 4, 5, 6]  # 7 out


Ex : List as queues.
# using Lists as queue
# first in first out
list = [2,3,4]
list.append(5)
list.append(6)
print(list.pop(0))  # removing first element
print(list)


*Note : List is not suitable to implement queue. when you remove first element, removing elements has to
move one step above as list store elements using index

# To implement queue, use collections.deque
# which was designed to have fast appends and pops
# from both ends
      from collections import deque
      queue = deque(["john","madhu","shami"])
      queue.append("Terry")
      print(queue)
      queue.popleft()
      print(queue) 
# output :
deque(['john', 'madhu', 'shami', 'Terry'])
deque(['madhu', 'shami', 'Terry']) # john removed

*************************************************************

Ex : operatin on list elements
# operation on list elements
# squaring elements

Example 1 :
squares = []
for x in range(10):
    squares.append(x**2)
print("without lamda ",squares)

Example 2:

sq = lambda x : x ** 2
result = map(sq,range(10))
print("with lambda ",result)


****************************************************************
lambda using seperate function because of complexity :

list = [1,2,3,4,5]

def function(x):
    x = x**2
    x = x - 10
    return x

square = lambda x:function(x)

result = map(square,list)

for m in result:
    print(m)

#output : each number squred and subtracted by 10
******************************************************************
del statement : 
There is a way to remove an item from a list given its index instead of its value: the del statement. 
This differs from the pop() method which returns a value. 
The del statement can also be used to remove slices from a list or clear the entire list

number = [10,20,30,40,50,60,70,80]
del number[0]
print(number)
del number[2:4]
print(number)

output :
[20, 30, 40, 50, 60, 70, 80]
[20, 30, 60, 70, 80]

*************************************************************************

searching an element from list 

list = [3,4,5,6]
print(3 in list)

# output : True, element 3 exists in list

**************************************************************************


enumerate()
When looping through a sequence, 
the position index and corresponding value can be retrieved at the same time using the enumerate() function.
for i in enumerate(['tic','tac','toe']):
	print(i)
      
# output :
(0, 'tic')
(1, 'tac')
(2, 'toe')


************************************************************************

To loop over two or more sequences(lists) at the same time, the entries can be paired with the zip() function.
Ex :
countries = ['india','germany','japan']
location = ['delhi','berlin','tokyo']
for c, l in zip(countries,location):
	print(c,l)
# output :
('india', 'delhi')
('germany', 'berlin')
('japan', 'tokyo')

**************************************************************************

reversing range 

for i in reversed(range(1,10,2)):
	print(i)
 # output : 9 7 5 3 2 1
 
 
 ************************************************************
 
 sorted() : create new list of sorted elements
 
 Ex :
 
      list = ['zack','tred','craig']
      anotherlist = sorted(list)
      print(anotherlist)
  
 # output :
 ['craig', 'tred', 'zack']
 
 
 *******************************************************************************************
 sort() vs sorted() : 
 sorted() returns a new sorted list, leaving the original list unaffected. 
 list.sort() sorts the list in-place, mutating the list indices, and returns None (like all in-place operations).


 pop() vs remove() 
 remove() function accept element as parameter to remove
 pop() function accept index of the element as parameter to remove

*****************************************************************

index(element) : searches element and return its index (if duplicates, choosed index of first element)
if element does not exists then it throw value error, saying that element not in list

list = [2,4,3,4,5]
print(list.index(4)

# ouptput : 1  # index of element 4 is 1




*****************************************************************


append vs extend : 

		append: Appends object at the end.

		x = [1, 2, 3]
		x.append([4, 5])
		print (x)

		gives you: [1, 2, 3, [4, 5]]

		extend: Extends list by appending elements from the iterable.

		x = [1, 2, 3]
		x.extend([4, 5])
		print (x)

		gives you: [1, 2, 3, 4, 5]

---

reversed list using slicing : 


		l = ['file1', 'file2', 'file3', 'file4']

		print(l[::-1])	# -1 will reversed order where 1 doesn't maintains same order

		output : ['file4', 'file3', 'file2', 'file1']


-----
