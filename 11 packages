
Packages allow for a hierarchical structuring of the module namespace using dot notation. 
In the same way that modules help avoid collisions between global variable names, 
packages help avoid collisions between module name.

package1 
__init__.py
Tiger.py

package2
__init__.py
Bird.py

----------code in Tiger.py--------
def sound():
    return 'roar'


def run():
    return 'running'
    
    
---------code in test.py----------
import package1.Tiger
print(package1.Tiger.run())
print(package1.Tiger.sound())

output : 
running
roar


***************************************** __init__.py  **********************************************
If a file named __init__.py is present in a package directory, 
it is invoked when the package or a module in the package is imported. 
This can be used for execution of package initialization code, such as initialization of package-level data.

Ex :
package1
      Tiger.py
      __init__.py

----- code in __init__.py ------
print('initializing package1...')


------ code in test.py---------
import package1.Tiger

output : 
initializing package1...

**********************************************************************************************************


importing all funcitons from a module 

from package1.Tiger import *
print(run())
print(sound())


***********************************************************************************************************
__all__ variable in __init__.py

lets say package1 has Lion.py and Tiger.py

in test.py
from package1 import *
print(dir())

output : ['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']
# not included Lion and Tiger module

so , in package1, under __init__.py define __all__ variable

--- code in __init__.py file ---

__all__ = [
    'Lion',
    'Tiger'
]


-- test again in test.py --

from package1 import *
print(dir())

output : added modules 
# ['Lion', 'Tiger', '__annotations__', '__builtins__', 
'__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']

# refer example: import all modules



***********************************************************************************

importance of __all__ variable : 
in init.py we can include all modules of current package

package1
        > __init__.py
        > Tiger.py
        > Lion.py

test.py wants to use modules from package1
lets say __init__.py is empty

test.py
from package1 import *
Tiger.sound()           # error because Tiger is not imported in this kind of import, alternate: import package1.Tiger

so use __all__ variable to include modules

__init__.py
__all__ = [ 'Tiger' , 'Lion' ] 


go back to test.py

from package1 import *
Tiger.sound()

# no error 

*******************************************************************

variables and functions defined in __init__.py file availabe 
in all modules of same package, to make use of it  , import currentPackageName

__init__.py( with in package1)
list = [1,2,3]

Tiger.py
import pakcage1
print(package1.list)     # [1,2,3]

--or--

from package1 import *
print(list)



******************************************************************

Forest
    tree.py
    animal
        tiger.py
        lion.py
    birds
        pigeon.py
        parrot.py


import module from same package


    .    :  same dirctory
    ..   :  parent directory
    ..intra_package_name : another package in same directory

tiger.py
from . import lion              // import from same directory

tiger.py                        // import parent package/directory
from .. import tree


tiger.py                        // intra package import
from ..birds import parrot


        





