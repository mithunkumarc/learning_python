Syntax Errors
A Python program terminates as soon as it encounters an error. 
In Python, an error can be a syntax error or an exception.

Syntax errors, also known as parsing errors, 
are perhaps the most common kind of complaint you get while you are still learning Python:
>>>
if 10>4
        ^
      print(True)
          
SyntaxError: invalid syntax


The parser repeats the offending line and displays a little ‘arrow’ pointing at the earliest point in the line 
where the error was detected. 
The error is caused by (or at least detected at) the token preceding the arrow: 
in the example, since a colon (':') is missing before it.

**************************************************************************************************
Exceptions : event which stop the normal exection of program. 

Example :

def division(numerator, denominator):
    return numerator/denominator


division(10,0)

# output : ZeroDivisionError: division by zero

****************************************************************************************************
handling exception : use try , except keywords to handle exception

def division(numerator, denominator):
    return numerator/denominator

try:
    division(10/0)
except ZeroDivisionError:
    print('denominator must not be zero')
    
    
********************************************************************************************************
multiple except block

try:
  expression may throw error
except Error1:
    # message 1
except Error2:
    # message 2
    
**********************************************************************************************************
Base exception : parent exception , handles all errors


def division(numerator, denominator):
    return numerator/denominator

try:
    division(10,0)
    # if try blocks contains a code which may throw error which we may not sure of, use base exception
except ZeroDivisionError:
    print('denominator must not be zero')
except BaseException:
    print('parent exception')



* Note : order of Error is specific to generic

*******************************************************************************************************

raising exception : forcing caller to hadle exception








