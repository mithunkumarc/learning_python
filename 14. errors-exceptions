Syntax Errors
A Python program terminates as soon as it encounters an error. 
In Python, an error can be a syntax error or an exception.

Syntax errors, also known as parsing errors, 
are perhaps the most common kind of complaint you get while you are still learning Python:
>>>
if 10>4
        ^
      print(True)
          
SyntaxError: invalid syntax


The parser repeats the offending line and displays a little ‘arrow’ pointing at the earliest point in the line 
where the error was detected. 
The error is caused by (or at least detected at) the token preceding the arrow: 
in the example, since a colon (':') is missing before it.

**************************************************************************************************
Exceptions : event which stop the normal exection of program. 

Example :

def division(numerator, denominator):
    return numerator/denominator


division(10,0)

# output : ZeroDivisionError: division by zero

****************************************************************************************************
handling exception : use try , except keywords to handle exception

def division(numerator, denominator):
    return numerator/denominator

try:
    division(10/0)
except ZeroDivisionError:
    print('denominator must not be zero')
    
    
********************************************************************************************************
multiple except block

try:
  expression may throw error
except Error1:
    # message 1
except Error2:
    # message 2
    
**********************************************************************************************************
Base exception : parent exception , handles all errors


def division(numerator, denominator):
    return numerator/denominator

try:
    division(10,0)
    # if try blocks contains a code which may throw error which we may not sure of, use base exception
except ZeroDivisionError:
    print('denominator must not be zero')
except BaseException:
    print('parent exception')



* Note : order of Error is specific to generic

*******************************************************************************************************

raising exception : forcing caller to hadle exception

without raising exception, designer has to handle error

def division(numerator,denominator):
    try:
        numerator / denominator
    except ZeroDivisionError:
        print('denominator must not be zero')



division(20,0)


Example 2 ; using raise keyword to force caller to handle error

def division(numerator,denominator):
    if denominator == 0:
        raise ZeroDivisionError
    numerator / denominator


try:
    division(20,0)
except ZeroDivisionError:
    print("i shouldn't had sent zero as denominator")
    
    ***************************************************************************************
  
  List of other excetpions
  
  NameError : 
  if your try to use variable without defining
  
 name
 print(name)
 
 # output : NameError: name 'name' is not defined
 
 
 
 *********************************************************************************************
 
 FileNotFoundError :
 f = open("missingFile.txt",'r')
for line in f.readlines():
    print(line)
    
# output :
FileNotFoundError: [Errno 2] No such file or directory: 'missingFile.txt'



************************************************************************************************
ValueError : mismatch data type

number = int(input('enter a number\n'))
print(number)

# output :
enter a number
one
ValueError: invalid literal for int() with base 10: 'one'

*************************************************************************************************

user defined exception and using finally statment

def withDrawMoney(amount):
    balance = 10000
    if amount > balance:
        raise InsufficientMoney
    else:
        balance = balance - amount
        print(f'withdraw {amount} successfull')
    return balance


class InsufficientMoney(BaseException):
    pass

try:
    withDrawMoney(25000)
except InsufficientMoney:
    print("send amount less than balance")
finally:
    print('thank you for using our services')



