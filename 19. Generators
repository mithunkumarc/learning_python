 A generator-function is defined like a normal function, but whenever it needs to generate a value, 
 it does so with the yield keyword rather than return. 
 If the body of a def contains yield, the function automatically becomes a generator function. 
 
 Generator-Object : Generator functions return a generator object. 
 Generator objects are used either by calling the next method on the generator object or 
 using the generator object in a “for in” loop
 
 
 
 Ex : using iterator
  list = [2,4,6,8]
  it = iter(list)
  print(next(it))
  print(next(it))
  print(next(it))
  print(next(it))
  print(next(it))   # error at a this line as , it is trying to iterate fifth element which doesn't exist




using generator : 

list = [2, 4, 6, 8]
def generator():
    for number in list:
        yield number

# calling generator() using for loop
for n in generator():
    print(n)

# calling generator() using __next()__ 
x = generator()
print(x.__next__())
print(x.__next__())
print(x.__next__())
print(x.__next__())


Note : 
x.__iter()__ will return generator object, to get element call x.__iter__.__next()__
x.__next()__ is equal to x.__iter__().__next__()


***********************************************************************************

word = 'disposition'
def generator():
    for c in word:
        yield c

for char in generator():
    print(char)

**************************************************************************
keywords = {'bat':'cricket','stick':'hockey','pawn':'chess'}
def generator():
    for kw in keywords:
        yield kw


for keyword in generator():                   # keyword reads only keys
    print(keyword,keywords[keyword])          # get value using dictionaryName[key]
    
    
    
 # output :
  bat cricket
  stick hockey
  pawn chess

*************************************************************************


list = [5,10,15,20,25,30,35,40]
def generateEvenNumbers():
    for number in list:
        if number % 2 == 0:
            yield number


for number in generateEvenNumbers():
    print(number)
    
 # output : 
 10
20
30
40


***************************************************************************

generator expression

print(sum(x*x for x in range(0,10)))   # ouput : 285, sum built in function




************************************************************************
handling stop iteration error

list=[10,20,30,40]
def generator():
    for i in list:
        yield i


g = generator()
def printNextElement():
    try:
        print(g.__next__())
    except:
        print('elements over')

printNextElement()
printNextElement()
printNextElement()
printNextElement()
printNextElement()
printNextElement()
printNextElement()

# output : 
10
20
30
40
elements over
elements over
elements over
