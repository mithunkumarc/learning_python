keyword arguments
Functions can also be called using keyword arguments of the form kwarg=value.

def score(team1, team2='cuba',day='sunday'):
    print('team1 ', team1)
    print('team2 ', team2)
    print('day ',day)
    print('--exit--')

# valid call
 score('india')
 score('india',team2='russia')
 score('india',day='friday')

# invalid call
score(team2='vietnam',day='monday') #required positional argument mission, team1 value missing


# example 2
def score(matchNumber,team1='india', team2='cuba',day='sunday'):
    print('team1 ', team1)
    print('team2 ', team2)
    print('day ',day)
    print('match number ',matchNumber)
    print('--exit--')


invalid : score(matchNumber=20,30)  #error : two values
          score(30,matchNumber=20)  #error





 score(matchNumber=112,113)  #error
# Positional argument after keyword argument : reason trying to assign required parameter with two values


score(113,matchNumber=112)   #error
#  got multiple values for argument 'matchNumber' : runtime






*********************************************************************************************************
* for tuples
** for dictionary


functions can take tuples as argument , parameter must be declared as *argumentslist
functions can take keywords as argument , parameter must be declared as **keywords
**keywords must be declared as the last.
*arguments must be appear before **keywords

def play(sport,*teams,**venues):
    print('sport ',sport)
    print('teams ',teams)
    for venue in venues:
        print(venue,venues[venue])
    

play('cricket','ind','sa','nz',india='bangalore',south_africa='capetown',newZealand='auckland')


#ouput :
sport  cricket
teams  ('ind', 'sa', 'nz')
india bangalore
south_africa capetown
newZealand auckland


*********************************************************************************
tuple must appear before dictionary

example 2 : error
def play_foot_ball(sport,**venues,*teams):
    pass
 
# error : * parameter after ** parameter


******************************************************************************************
positional argument after keyword argument

def sayHello(name,message=', welcome to programming!!'):
    print(name + message)


sayHello(name='rajat','message positional')
#error : positional argument after keyword argument

solution : 
sayHello('rajat',message='new message')
sayHello('rajat',message='another message')
sayHello('rajat')

************************************************************************************************
non-default parameter follows default parameter

def sayHello(message=', welcome to programming!!',name):
    print(name + message)

# error : non-default parameter follows default parameter

solution : 
def sayHello(name,message=', welcome to programming!!'):
    print(name + message)

**********************************************************************************************

sending list/set/tuple as argument

def printSequence(sequence):
    print(sequence)


printSequence([1,2,3,4])
printSequence((1,2,3,4))
printSequence({1,2,3,4})

#output :
[1, 2, 3, 4]
(1, 2, 3, 4)
{1, 2, 3, 4}

**********************************************************************************************

to accept argument as tuple

def acceptAsTuple(*tuple):
    print(tuple)



acceptAsTuple(1,2,3,4)
acceptAsTuple([1,2,3])
acceptAsTuple({1,2,3},[2,3,4])
acceptAsTuple({'batman':'brucewayne','age':32})
acceptAsTuple(('a','b'))


#ouput :
(1, 2, 3, 4)                            # accepted as tuple
([1, 2, 3],)                            # tuple with one list 
({1, 2, 3}, [2, 3, 4])                  # tuple with one set and list
({'batman': 'brucewayne', 'age': 32},)  # tuple with one dictionary
(('a', 'b'),)                           # nested tuple


***********************************************************************************************
use **parameter to accept keyword arguments

def printKeywords(**keywords):
    print(keywords)


printKeywords(name='rajat',phoneNumber=4566777)


#output :
{'name': 'rajat', 'phoneNumber': 4566777} 


* Note : if you skip ** for parameter, throws TypeError
def printKeywords(keywords):
    print(keywords)


printKeywords(name='rajat',phoneNumber=4566777)

solution :
instead of keyword , send as dictionary

printKeywords({'name':'rajat','phoneNumber':4566777})



************************************************************************************************

The default values are evaluated at the point of function definition in the defining scope.

i = 5

def f(arg=i):
    print(arg)

i = 6
f()

# output : 5

**********************************************************************************************


function can accept tuples and keywords as arguments
use *parameter for tuples and **parameter for keywords

def play(sport,*teams,**venues):
    print('sport ',sport)
    print('teams ',teams)
    for venue in venues:
        print(venue,venues[venue])


play('cricket','ind','sa','nz',india='bangalore',south_africa='capetown',newZealand='auckland')


Note : *parameter must appear must before **parameter
Note : **parameter must be at end

************************************************************************************************

multiple * parameters are not allowed


def multipleTuple(*tuple1,*tuple2):
    print()

#output : error

*************************************************************************************************

parameter without default parameter must be declared before *parameter

def listTuple(*tuple,list):
    print(tuple,list)

listTuple(3,4,5,[4,5])

# output : error, no value for list , 3,4,5,[4,5] goto tuple


*************************************************************************************************

function acception list and tuple as parameter

def printKeywords(list,*tuple1):
    print(tuple1,list)


printKeywords([3,4,5],2,3,4,5)

#output : (2, 3, 4, 5) [3, 4, 5]

*************************************************************************************************



Arbitrary Argument Lists

Finally, the least frequently used option is to specify that a function can be called with an arbitrary number of arguments. 
These arguments will be wrapped up in a tuple .
Before the variable number of arguments, zero or more normal arguments may occur.

>>> def concat(*args, sep="/"):
...     return sep.join(args)
...
>>> concat("earth", "mars", "venus")
'earth/mars/venus'

***************************************************************************************

Unpacking Argument Lists

>>> list(range(3, 6))            # normal call with separate arguments
[3, 4, 5]
>>> args = [3, 6]
>>> list(range(*args))            # call with arguments unpacked from a list
[3, 4, 5]


*********************************lambda expressions************************************

lambda expression Python allow us to define a function anonymously. 
It is worthwhile to note that it is an expression, not a statement. 
That is, it returns a value; it has an implicit return statement. 
The following is the Python syntax of a lambda expression in Python.

lambda [arg1,arg2,..]:[expression]


add = lambda a,b : a+b

print(add(3,4))

ex 2 :
square = lambda a : a**2

print(square(4))    #16

--next--


 Documentation Strings
 
 
 >>> def my_function():
...     """Do nothing, but document it.
...
...     No, really, it doesn't do anything.
...     """
...     pass
...
>>> print(my_function.__doc__)
Do nothing, but document it.

    No, really, it doesn't do anything.
    
 ***********************************************************************************************
 
 Function Annotations :
 
 Function annotations are completely optional metadata information about the types used by user-defined functions 

Annotations are stored in the __annotations__ attribute of the function as a dictionary and have no effect on any other part 
of the function. Parameter annotations are defined by a colon after the parameter name, 
followed by an expression evaluating to the value of the annotation. 
Return annotations are defined by a literal ->, followed by an expression, 
between the parameter list and the colon denoting the end of the def statement. 
The following example has a positional argument, a keyword argument, and the return value annotated:
>>>

>>> def f(ham: str, eggs: str = 'eggs') -> str:
...     print("Annotations:", f.__annotations__)
...     print("Arguments:", ham, eggs)
...     return ham + ' and ' + eggs
...
>>> f('spam')
Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}
Arguments: spam eggs
'spam and eggs'


* NOTE ; use symbol -> for return type, and : for parameter/variable.


**********************************************************************************************

typing module to help mention annotation type



from typing import List

def return_list() -> List:
    return list(range(2,10))

print(return_list())


--next--


class User:
    def __init__(self,name,id):
        self.name = name
        self.id = id

def return_user() -> User:
    return User('rajat',123)

user = User()

print(user.name,user.id)

--next--

type alias 

from typing import List
items = List[str]
def get_list() -> items:
    return ['item1','item2','item3']
print(get_list())

#output : ['item1', 'item2', 'item3']

*****************************************************************************
