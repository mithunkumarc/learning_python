concatenete :
The + Operator

The + operator concatenates strings. It returns a string consisting of the operands joined together, as shown here:

>>> s = 'foo'
>>> t = 'bar'
>>> u = 'baz'

>>> s + t
'foobar'
>>> s + t + u
'foobarbaz'

>>> print('Go team' + '!!!')
Go team!!!
**********************************************************

The * Operator

The * operator creates multiple copies of a string. 
If s is a string and n is an integer, 
either of the following expressions returns a string consisting of n concatenated copies of s:

    s * n
    n * s

Here are examples of both forms:

>>> s = 'foo.'

>>> s * 4
'foo.foo.foo.foo.'
>>> 4 * s
'foo.foo.foo.foo.'

****************************************************************

The in Operator

Python also provides a membership operator that can be used with strings. The in operator returns True if the first operand is contained within the second, and False otherwise:

>>> s = 'foo'

>>> s in 'That\'s food for thought.'
True
>>> s in 'That\'s good for now.'
False

There is also a not in operator, which does the opposite:

>>> 'z' not in 'abc'
True
>>> 'z' not in 'xyz'
False

***********************************************************
len(s)

    Returns the length of a string.

len(s) returns the number of characters in s:

>>> s = 'I am a string.'
>>> len(s)
14

*******************************************************

str(obj)

    Returns a string representation of an object.

Virtually any object in Python can be rendered as a string. str(obj) returns the string representation of object obj:

>>> str(49.2)
'49.2'
>>> str(3+4j)
'(3+4j)'
>>> str(3 + 29)
'32'
>>> str('foo')
'foo'

*************************************************


String Indexing

left to right index : 0 to len(string)-1
right to left index : -1 to -len(string)


>>> s = 'foobar'

>>> s[0]
'f'
>>> s[1]
'o'
>>> s[3]
'b'
>>> len(s)
6
>>> s[len(s)-1]
'r'

Here are some examples of negative indexing:

>>> s = 'foobar'

>>> s[-1]
'r'
>>> s[-2]
'a'
>>> len(s)
6
>>> s[-len(s)]
'f'

*********************************************************************
String Slicing

string index : ex for : Editor

 E  :  d  :  i  :  t  :  o  : r 
-6  :  -5 : -4  : -3  : -2 : -1
 0  :  1  :  2  :  3  :  4 :  5

Python also allows a form of indexing syntax that extracts substrings from a string, known as string slicing.
If s is a string, an expression of the form s[m:n] returns the portion of s starting with position m, 
and up to but not including position n:

>>> s = 'foobar'
>>> s[2:5]
'oba'


Remember: String indices are zero-based. The first character in a string has index 0. 
This applies to both standard indexing and slicing.

If you omit the first index, the slice starts at the beginning of the string. Thus, s[:m] and s[0:m] are equivalent:

>>> s = 'foobar'

>>> s[:4]
'foob'
>>> s[0:4]
'foob'


Similarly, if you omit the second index as in s[n:], the slice extends from the first index through the end of the string. This is a nice, concise alternative to the more cumbersome s[n:len(s)]:

>>> s = 'foobar'

>>> s[2:]
'obar'
>>> s[2:len(s)]
'obar'

--next--

For any string s and any integer n (0 ≤ n ≤ len(s)), s[:n] + s[n:] will be equal to s:

>>> s = 'foobar'

>>> s[:4] + s[4:]
'foobar'
>>> s[:4] + s[4:] == s
True


************************************************************************

String interpolation :

without interpolation :
>>> n = 20
>>> m = 25
>>> prod = n * m
>>> print('The product of', n, 'and', m, 'is', prod)
The product of 20 and 25 is 500

But this is cumbersome. To accomplish the same thing using an f-string:

    Specify either a lowercase f or uppercase F directly before the opening quote of the string literal. 
    This tells Python it is an f-string instead of a standard string.
    Specify any variables to be interpolated in curly braces ({}).

Recast using an f-string, the above example looks much cleaner:

>>> n = 20
>>> m = 25
>>> prod = n * m
>>> print(f'The product of {n} and {m} is {prod}')
The product of 20 and 25 is 500

Any of Python’s three quoting mechanisms can be used to define an f-string:

>>> var = 'Bark'

>>> print(f'A dog says {var}!')
A dog says Bark!
>>> print(f"A dog says {var}!")
A dog says Bark!
>>> print(f'''A dog says {var}!''')
A dog says Bark!


*******************************************************
s.capitalize()

    Capitalizes the target string.

s.capitalize() returns a copy of s with the first character converted to uppercase and all other characters converted to lowercase:

>>> s = 'foO BaR BAZ quX'
>>> s.capitalize()
'Foo bar baz qux'


***************************************************************
s.lower()

    Converts alphabetic characters to lowercase.

s.lower() returns a copy of s with all alphabetic characters converted to lowercase:

>>> 'FOO Bar 123 baz qUX'.lower()
'foo bar 123 baz qux'

*****************************************************************
s.swapcase()

    Swaps case of alphabetic characters.

s.swapcase() returns a copy of s with uppercase alphabetic characters converted to lowercase and vice versa:

>>> 'FOO Bar 123 baz qUX'.swapcase()
'foo bAR 123 BAZ Qux'

*****************************************************************

s.title()

    Converts the target string to “title case.”

s.title() returns a copy of s in which the first letter of each word is converted to uppercase and remaining letters are lowercase:

>>> 'the sun also rises'.title()
'The Sun Also Rises'


********************************************************************

upper()

    Converts alphabetic characters to uppercase.

s.upper() returns a copy of s with all alphabetic characters converted to uppercase:

>>> 'FOO Bar 123 baz qUX'.upper()
'FOO BAR 123 BAZ QUX'


***********************************************************************

s.isdigit()

    Determines whether the target string consists of digit characters.

s.digit() returns True if s is nonempty and all its characters are numeric digits, and False otherwise:

>>> '123'.isdigit()
True
>>> '123abc'.isdigit()
False
**********************************************************************
Rules for writing identifiers

    Identifiers can be a combination of letters in lowercase (a to z) or uppercase (A to Z) 
    or digits (0 to 9) or an underscore (_). Names like myClass, var_1 and print_this_to_screen, all are valid example.
    
    An identifier cannot start with a digit. 1variable is invalid, but variable1 is perfectly fine.
    
    Keywords cannot be used as identifiers. 
    
 *********************************************************************
 s.replace(<old>, <new>[, <count>])

    Replaces occurrences of a substring within a string.

s.replace(<old>, <new>) returns a copy of s with all occurrences of substring <old> replaced by <new>:

>>> 'foo bar foo baz foo qux'.replace('foo', 'grault')
'grault bar grault baz grault qux'
***********************************************************************
