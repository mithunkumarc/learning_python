**********************************
var = input()
print(type(var))

# input : 12
# output : str

* by default intput takes input as string
* use int(input('enter a number')) to accept as integer


****************************************************

formatting str , %s is used to display value of a variable within string

num1 = 10
num2 = 20
print('the sume of num1 %s and num2 %s is %s ' %(num1,num2,num1+num2))
# the sume of num1 10 and num2 20 is 30 

* although you can use %d for number, %s is recommended to avoid confusion
%s work for both number and str
%d only work for number

********************************************


# formatting string using curly braces
num1 = 10
num2 = 20
print('the sum of num1 : {} and num2 : {} is {} '.format(num1,num2,num1+num2))
#-or-
print('the sum of num1 : {0} and num2 : {1} is {2} '.format(num1,num2,num1+num2))


***********************************************

formatted string literals 

Formatted string literals (also called f-strings for short) let you include the value of Python expressions 
inside a string by prefixing the string with f or F and writing expressions as {expression}.

syntax : print(' the value is {positionOfExpression1,poe2...:nd}'.format(expression1/variable1,e2/v2...))
          or
         print(f' the value is {expression:nd}')      #number of spaces , nf number of decimal places, no postion needed

An optional format specifier can follow the expression. 
This allows greater control over how the value is formatted. 
The following example rounds pi to three places after the decimal:

>>>
import math
# without formatting
print('the value of pi {0}'.format(math.pi))

# with formattting
print('the value of pi {0:.3f}'.format(math.pi))      # 0 because there's only one value goint to output
print('the value of pi {:.3f}'.format(math.pi))       #notice , zero as been removed

print(f'the value of pi is approximately {math.pi:.3f}')

#output : 
the value of pi 3.141592653589793
the value of pi 3.142
the value of pi is approximately 3.142

----Ex---

printing range of numbers and its squares and cubes with spaces

for x in range(1,11):
    print(f'{x:2d} {x**2:4d} {x**3:4d}')
    --or--
    print('{0:2d} {1:4d} {2:4d}'.format(x,x**2,x**3))
    
# output :
 1    1    1
 2    4    8
 3    9   27
 4   16   64
 5   25  125
 6   36  216
 7   49  343
 8   64  512
 9   81  729
10  100 1000


   





