import logging
logging.basicConfig(filename='applog',
                            filemode='a',
                            format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                            datefmt='%H:%M:%S',
                            level=logging.DEBUG)

logging.debug('Debugging information')
logging.info('Informational message')
logging.warning('Warning:config file %s not found', 'server.conf')
logging.error('Error occurred')
logging.critical('Critical error -- shutting down')

logger = logging.getLogger('test')
print(logger.name) # prints test


# output : applog file will be created under current project folder

21:11:05,978 root DEBUG Debugging information
21:11:05,979 root INFO Informational message
21:11:05,979 root WARNING Warning:config file server.conf not found
21:11:05,979 root ERROR Error occurred
21:11:05,979 root CRITICAL Critical error -- shutting down


note:
#name : name of the logger , root is the parent logger, in above example ,test is the logger which is a 
child of root logger.
The Python logging module organizes loggers in a hierarchy. 
All loggers are descendants of the root logger. 
Each logger passes log messages on to its parent.
so in logging file, name will be assigned with value root
