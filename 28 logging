# if logging level set to DEBUG, all log levels will be printed on console
# if logging level set to INFO, all log levels will be printed on console except DEBUG
# if logging level set to WARNING, only WARNING, ERROR and CRITICAL log levels are printed
# if logging level set to ERROR, only ERROR and CRITICAL log levels are printed
# if logging level set to CRITICAL, only CRITICAL log levels are printed 
# if you do not set logging level in basic config,  default logging level is WARNING
# use logging.getlogger('user_defined_logger_name') to use user defined logger name instead of root

      import logging
      logging.basicConfig(level=logging.DEBUG)
      logging.debug('Debugging information')
      logging.info('Informational message')
      logging.warning('Warning:config file %s not found', 'server.conf')
      logging.error('Error occurred')
      logging.critical('Critical error -- shutting down')


-----------------------------------
# logging to file

import logging
logging.basicConfig(filename='applog',
                            filemode='a',
                            format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                            datefmt='%H:%M:%S',
                            level=logging.DEBUG)

logging.debug('Debugging information')
logging.info('Informational message')
logging.warning('Warning:config file %s not found', 'server.conf')
logging.error('Error occurred')
logging.critical('Critical error -- shutting down')

logger = logging.getLogger('test')  # changing logger name from root to test
print(logger.name) # prints test


# output : applog file will be created under current project folder

21:11:05,978 root DEBUG Debugging information
21:11:05,979 root INFO Informational message
21:11:05,979 root WARNING Warning:config file server.conf not found
21:11:05,979 root ERROR Error occurred
21:11:05,979 root CRITICAL Critical error -- shutting down


note:
#name : name of the logger , root is the parent logger, in above example ,test is the logger which is a 
child of root logger.
The Python logging module organizes loggers in a hierarchy. 
All loggers are descendants of the root logger. 
Each logger passes log messages on to its parent.
so in logging file, name will be assigned with value root




--------------------------------------------------

The Python logging module organizes loggers in a hierarchy. 
All loggers are descendants of the root logger. 
Each logger passes log messages on to its parent.

New loggers are created with the getLogger() function. 
The function call logging.getLogger('debug0.x') creates a logger x which is a child of debug0 which itself is a child of the root logger. 
When logging to this logger, it will pass on the message to its parent, and its parent will pass the message to the root logger. 
You configured the root logger to log to a file by the basicConfig() function, so your message will end up there.
