module itertools

count(start_number , increment_step) : generate infinite number with mentioned increment_step

break statement cannot stop count function, use takewhile object to get range of numbers

# count() : list of number continuosly numbers increment with 20
import itertools
#cannot stop count() function using break
# for i in itertools.count(10, 20):
#     if i == 200:
#         break
#     print(i)

# use takewhile to stop
take_while = itertools.takewhile(lambda x: x < 200, itertools.count(10,20))
for i in take_while:
    print(i)


********************************************************************************************************************


# cycle() prints elements in cyclic order infinitely
import itertools

iterator = itertools.cycle(['A','B','C'])
number = 100
for i in iterator:
    print(i)
    number = number -1
    if number == 0:
        break
        
        
        
        
********************************************************************************************************************



# repeat() : repeats a number for specified number of times

import itertools
for number in itertools.repeat(10,5):
    print(number)

# output : prints element 10 for 5 times


*********************************************************************************************************************
accumulate() : accumulating sum of prevoius numbers

import itertools
list = [1,2,3,4,5]
accumulate = itertools.accumulate(list,lambda x,y:x+y)
for i in accumulate:
    print(i)

# output :
1
3
6
10
15

******************************************************************************************************
chain() : 
Make an iterator returning elements from the iterable and saving a copy of each. 
When the iterable is exhausted, return elements from the saved copy

import itertools
list1 = [1,2,3,4,5]
set = {'one','two'}
list3 = ['a','b','c']
chain = itertools.chain(list1,set,list3)
for c in chain:
    print(c)
    
 # output : 
 1
2
3
4
5
one
two
a
b
c

*****************************************************************************

dropwhile()


import itertools
#Make an iterator that drops elements from the iterable as long as the predicate is true;
# afterwards, returns every element.

#prints all elements , because condition is false , 10 >40
list = [10,20,30,40,50,60,70,80,90,100]
for number in itertools.dropwhile(lambda x: x > 40 , list):
    print(number)

# output :
# 10
# 20
# 30
# 40
# 50
# 60
# 70
# 80
# 90
# 100

#prints only greater than 40 elements    , predicates false at 40 < 40
for number in itertools.dropwhile(lambda x: x < 40 , list):
    print(number)

# output : 
# 40
# 50
# 60
# 70
# 80
# 90
# 100


****************************************************************************************************

import itertools

islice = itertools.islice('ABCDEF',2) # start index 0 , stop index 2
for char in islice:
    print(char)
# output : A , B

islice = itertools.islice('ABCDEF',2,5) # start index 2, stop index 5
for char in islice:
    print(char)

# output : C D E


**************************************************************************************************

import itertools

compressed = itertools.compress([10,20,30,40,50,60],[0,1,0,1,0,60]) # (data, selectors)
for c in compressed:
    print(c)
    
# output : 20  40  60

*********************************************************************************8


# tee() : Return n independent iterators from a single iterable.
import itertools

main = itertools.tee('abcdef',3)    # (iterable, number of times)
for sub in main:
    for n in sub:
        print(n)
    else:
        print('end of current loop')
# output : prints abcdef 3 times


*****************************************************************************************

# groupby() : Make an iterator that returns consecutive keys and groups from the iterable. 
# The key is a function computing a key value for each element. 

import itertools

for k,group in  itertools.groupby([['subject1','english'],['subject2','kannada']]):
    for g in group:
        print(f'{k[0]} is {g[1]}')
        
# output :
# subject1 is english
# subject2 is kannada
