when we have to choose generator over list? 
ans . while generating large list of data



# using list

 import time
 started = time.time()
 list = [x*2 for x in range(1000000,9000000)]  # list of numbers between 1000000 and 9000000 
 print(time.time()-started)

# output :
# taking 0.62343.. seconds to generate list of numbers*2 between 1000000 and 9000000


# using generator
# generator works on demand , on call of next function ,it gives the next number 
  
  started = time.time()
  generator = (x*2 for x in range(1000000,9000000))   #() indicates generator
  print(time.time()-started)

#takes almost zero time
#taking 0.00000178 seconds to create generator object(not list of numbers)

# print(generator.__next__()), get one by one element by calling next function


************************************************************************************************************************
generator expression sytax:

1. return generator object : 
(generator_expession for variable in range(start,end)) 


2. returns list of numbers
[generator_expession for variable in range(start,end)] 


Note : 
use () braces to return generator object , use [] to get list of elements

******************************************************************************************

'''
    list of numbers using generator function
    generator generate number when you call next on generator object
    example for lazy action    
'''

generator = (x for x in range(1,10))
print(type(generator))
print(generator)
# <class 'generator'>
# <generator object <genexpr> at 0x7feaa25b3bf8>
# to get numbers from generator call next() on generator object

print(generator.__next__()) //generator obj generator numbers when you call __next__()
print(generator.__next__())

*****************************************************************************************************
# list will generate as soon as you execute below line
# example for early action
# performance hit , program has to wait until list generate all numbers

list = [x for x in range(1,10)]
print(type(list))
print(list)
print(len(list)) # output 9 : prooves that generates all numbers when u create list using generator expression
# <class 'list'>
# [1, 2, 3, 4, 5, 6, 7, 8, 9]


