def add(*args):         # packing : arguments accepted as tuple
    sum = 0
    for a in args:
        sum = sum + a
    return sum

# packing : arguments accepted as tuple
print(add(3,6,9))

***************************************************************************************
#unpacking
def multiplication(a,b,c):        #unpacking : arguments accepted as individual elements
    product =a * b * c
    return product

t = (3,6,9)

#unpacking : elements of tuple ,unpacked as individual elements
print(multiplication(*t))

****************************************************************************************

#convert list to tuple
mytuple = tuple([2,3,4])
print(type(mytuple))

#convert tuple to list
mylist = list((2,3,4))
print(type(mylist))


***********************************************************************

unpacking nested datastructures : 

        (a, b) = (1, 2)
        # a == 1
        # b == 2

        (a, b) = ([1, 2], [3, 4])
        # a == [1, 2]
        # b == [3, 4]

        (a, [b, c]) = (1, [2, 3])
        # a == 1
        # b == 2
        # c == 3


         [a,[b,c]] = [1,[2,3]]
         # a : 1
         # b : 2
         # c : 3

********************************************************************************
unpacking : starred targets

            >>> a,*b,c = 1,2,3,4,5
            >>> a
            1
            >>> b
            [2, 3, 4]
            >>> c
            5

            >>> x,*y,z = ['a','b','c','d','e']
            >>> x
            'a'
            >>> y
            ['b', 'c', 'd']
            >>> z
            'e'
            >>> 


********************************************
difference between 

                a,b,c = 1,2,3
                a,*b,c = 1,2,3
                
                output :      
                    a,*b,c = 1,2,3
                    *b = [2]    # list
                    
                    a,b,c = 1,2,3
                    b = 2       # class int
                    

**************************************************
