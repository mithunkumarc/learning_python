garbage collection
    The process of freeing memory when it is not used anymore. 
    Python performs garbage collection via reference counting and a cyclic garbage collector that is 
    able to detect and break reference cycles. 
    The garbage collector can be controlled using the gc module
    
   Python does automatic memory management (reference counting for most objects and garbage collection to eliminate cycles).
   The memory is freed shortly after the last reference to it has been eliminated.

   This approach works fine for most applications but occasionally there is a need to track objects only as long
   as they are being used by something else.
   Unfortunately, just tracking them creates a reference that makes them permanent. 
   The weakref module provides tools for tracking objects without creating a reference.
   When the object is no longer needed, it is automatically removed from a weakref table and a callback 
   is triggered for weakref objects. Typical applications include caching objects that are expensive to create:
>>>

import weakref, gc
>>> class A:
...     def __init__(self, value):
...         self.value = value
...     def __repr__(self):
...         return str(self.value)
...
>>> a = A(10)                   # create a reference
>>> d = weakref.WeakValueDictionary()
>>> d['primary'] = a            # does not create a reference
>>> d['primary']                # fetch the object if it is still alive
10
>>> del a                       # remove the one reference
>>> gc.collect()                # run garbage collection right away
0
>>> d['primary']                # entry was automatically removed
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    d['primary']                # entry was automatically removed
  File "C:/python37/lib/weakref.py", line 46, in __getitem__
    o = self.data[key]()
KeyError: 'primary'



********************************************************************************

by default garbage collection is enabled

import gc
print(gc.isenabled())
print(gc.enable()) # to enable
print(gc.disable()) # to disable


**************************************************

is_tracked() : 
As a general rule, instances of atomic types aren’t tracked and instances of non-atomic types 
(containers, user-defined objects…) are.

>>> gc.is_tracked(0)
False
>>> gc.is_tracked("a")
False
>>> gc.is_tracked([])
True
>>> gc.is_tracked({})
False
>>> gc.is_tracked({"a": 1})
False
>>> gc.is_tracked({"a": []})
True


***********************************************************************************

*  : __repr__ should return a printable representation of the object/ (similar to toString)
