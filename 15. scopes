local scope : not accessible outside enclosing scope
A variable declared inside the function's body or in the local scope is known as local variable.

def scope_test():
    def do_local():
        spam = 'local spam'

    spam = 'test spam'
    do_local()
    print(spam)

scope_test()
# print(spam)     # error

# ouput : 'test spam'


non local
Nonlocal variable are used in nested function whose local scope is not defined.
non local variable values are changed in local context using non local variables
This means, the variable can be neither in the local nor the global scope.

Ex :
def scope_test():
    def do_nonlocal():
        nonlocal spam
        spam = 'nonlocal spam'

    spam = 'test spam'
    do_nonlocal()
    print(spam)


scope_test()
# print(spam) # error , not accessible

# output : 'nonlocal spam


Ex 2 :
def outer():
    x = "local"

    def inner():
        nonlocal x
        x = "nonlocal"
        print("inner:", x)

    inner()
    print("outer:", x)
    # print(spam) # error , not accessible

outer()


# output :
inner : nonlocal
outer : nonlocal


*********************************************************************************
global : 
In Python, a variable declared outside of the function or in global scope is known as global variable. 
To change global variable value from local context, use global keyword

me = 'iknow'
def main():
    me = 'what'                 # this is not global variable, so no change to this variable
    def block():
        global me
        me = "you don't know"   # changing the value of global 'me' variable
    block()
    print('main me',me)         # prints 'what'

main()
print('global me',me)           # prints 'you don't know' instead of 'iknow'

output : 
main me what
global me you don't know





